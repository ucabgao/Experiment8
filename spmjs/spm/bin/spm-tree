#!/usr/bin/env node

var path = require('path');
var resolve = path.resolve;
var commander = require('commander');
var archy = require('archy');
var spmrc = require('spmrc');
var log = require('../lib/utils/log');

require('colorful').colorful();
var spm = require('..');
var file = require('../lib/sdk/file');

commander
  .option('-d, --depth <n>', 'set the depth to <n>', Infinity)
  .option('--no-color', 'disable colorful print');

commander.parse(process.argv);

// color
spm.log.config(commander);

var cache = {};
var file = spm.sdk.file;

var query = commander.args[0];

// handle "spm tree class"
if (query) {
  // don't show spm install log message
  log.quiet = true;
  spm.install.fetch(query, function(err, dest) {
    spm.install({
      source: commander.source,
      destination: dest + '/sea-modules/',
      force: commander.force,
      parallel: commander.parallel,
      query: commander.args
    }, function() {
      process.chdir(dest);
      log.quiet = false;
      console.log(indent(archy(color(tree('package.json')))));
    });
  });
  return;
}

var p = file.readJSON('package.json');
if (!p || !p.spm) {
  console.log();
  log.error('miss', 'package.json or "spm" key');
  process.exit(2);
}

console.log();
console.log(indent(archy(color(tree('package.json')))));

function tree(f, paths, depth) {
  depth = depth || 0;
  if (!f) return {};
  f = resolve(f);
  if (!file.exists(f)) {
    console.log('  can not find ' + path.relative(process.cwd(), f));
    return {};
  }
  var pkg = require(f);

  paths = paths || ['sea-modules', path.join(spmrc.get('user.home'), '.spm', 'sea-modules')];

  var node = {};
  var title = pkg.name;
  node.label = title + '@' + pkg.version;

  if (cache[title] && cache[title] !== pkg.version) {
    cache[title] = 'conflict';
  }
  if (!cache[title]) {
    cache[title] = pkg.version;
  }

  if (++depth > commander.depth) return node;

  if (pkg.spm && pkg.spm.dependencies) {
    var deps = pkg.spm.dependencies;

    deps = Object.keys(deps).map(function(key) {
      return {
        name: key,
        version: deps[key]
      };
    }).filter(function(key) {
      return key;
    });
    node.nodes = deps.map(function(parsed) {
      return tree(lookup(paths, parsed));
    });
  }
  return node;
}

function color(node) {
  if (node.nodes) {
    node.nodes = node.nodes.map(color);
  }
  if (node.label) {
    var bits = node.label.split('@');
    var title = bits[0];
    var version = bits[1];
    if (cache[title] === 'conflict') {
      node.label = title.to.yellow + ('@' + version).to.red;
      if (commander.color === false) {
        node.label = '{' + title + '@' + version + '}';
      }
    } else {
      node.label = title.to.cyan + ('@' + version).to.grey;
    }
  }
  return node;
}

function lookup(paths, pkg) {
  var pkgfile;
  paths.some(function(f) {
    var fpath = path.join(f, pkg.name, pkg.version, 'package.json');
    if (file.exists(fpath)) {
      pkgfile = fpath;
      return true;
    }
  });
  if (!pkgfile) {
    spm.log.error('package', pkg.name + '@' + pkg.version + ' not found');
    return null;
  }
  return pkgfile;
}

function indent(str) {
  return str.replace(/^/gm, '  ');
}
